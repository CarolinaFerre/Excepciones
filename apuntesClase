Tema 8 – Excepciones

• Introducción
● Gestión de excepciones
● Lanzamiento y declaración de
excepciones
● Creación de excepciones propias
● Bloque finally






Introducción

● En todo programa se producen errores
– Errores en tiempo de compilación
– Errores en tiempo de ejecución

● Situación ideal: poder detectar todos los
errores en tiempo de compilación
– Esto no es posible: no todos los errores se
pueden detectar en tiempo de compilación
(p.e. dividir por una variable cuyo valor es 0
en algunos casos)
Introducción

● Errores en tiempo de compilación
– Léxicos
 String literal is not properly closed by a double-quote
– Sintácticos
 Syntax error on token “int”, invalid VariableDeclaratorId
private String cadena = “hola;
private numero int = 0;
Introducción

● Errores en tiempo de compilación
– Semánticos
 Type mismatch: cannot convert from Integer to String
private String cadena = new Integer(5);
Introducción

● Errores en tiempo de ejecución
– Recuperables
• Se pueden detectar y se deben tratar
• p.e. un fallo en una conexión de red, un fichero que no
existe, una entrada de datos incorrecta...)
– No recuperables
• Errores que, habitualmente, son causados por el
sistema operativo sobre el que el programa no puede
actuar.
• p.e. falta de memoria, fallo en la máquina virtual…
• Son errores graves, que suelen finalizar la ejecución
del programa
Introducción

● ¿Qué hacer ante un error en tiempo de
ejecución?
– ¿Ignorarlo?, ¿terminar la ejecución?,
¿hacer algo? ¿mostrar un error al usuario?

● Es necesario poder manejar los errores
que se producen en tiempo de ejecución
Introducción

● Los errores en tiempo de ejecución en Java
se denominan excepciones (exceptions)

● Cuando se produce una excepción, se
interrumpe la ejecución secuencial de las
sentencias

● No se ejecuta la sentencia posterior a
aquella en la que se produce la excepción

● Por defecto se muestra por pantalla ( salida
estándar de errores) un informe del error
producido.

public class Prueba {
 public static void main(String[] args) {
 System.out.println("Sentencia 1");
 System.out.println("Sentencia 2");
 //Sentencia 3
 int divisionPorCero = 4 / 0;
 //Estas sentencias no se ejecutarán
 System.out.println("Sentencia 4");
 System.out.println("Sentencia 5");
 }
}
Introducción
Sentencia 1
Sentencia 2
Exception in thread "main" java.lang.ArithmeticException: / by zero
at Prueba.main(Prueba.java:10)
Introducción

● Finalizar la ejecución del programa es una medida
demasiado drástica cuando se produce una
excepción.

● Es necesario poder ejecutar cierto código cuando se
produzca una excepción.
– Informar al usuario con un cuadro de diálogo (Timeout,
fichero inexistente)
– Hacer log (registro) del error
– Realizar otra operación alternativa

● Ejecutar código ante una excepción se denomina
capturar, manejar o gestionar la excepción








Gestión de Excepciones

● Siempre que se produce una excepción,
se crea un objeto que mantiene
información sobre el error producido.

● Dependiendo del error, se creará un
objeto de una clase determinada.

● Usando métodos de los objetos
excepción podremos conocer detalles del
error producido.
Gestión de excepciones

• java.lang.Throwable: Clase padre de
todas las excepciones

• java.lang.Error: problemas serios que
normalmente no se debería intentar manejar
(Error de la máquina virtual,…)

• java.lang.Exception:
– Excepciones que indican problemas
razonables que son recuperables

● Fallo en la red (no hay conexión con
el servidor)

● Fallo de acceso a disco (se saca la
llave USB)

● Fallo de formato de los datos …
– Normalmente deben ser
capturadas
Throwable
Error Exception
Gestión de excepciones

● Jerarquía de herencia de excepciones 
Gestión de excepciones
java.lang.Object
 java.lang.Throwable
 java.lang.Exception
 java.lang.RuntimeException
 java.lang.IllegalArgumentException
 java.lang.NumberFormatException
 
● Ejemplo de Exception
– Se produce cuando se intenta convertir una
cadena a entero y no corresponde a un entero
Gestión de excepciones

● Algunos métodos de la clase base Throwable:
– public String getMessage()

• Devuelve un mensaje que informa de la excepción
– public void printStackTrace()

• Imprime los métodos que estaban en la pila de ejecución
cuando se produjo la excepción por la salida estándar

• Incluye la línea donde se produce la excepción

• Es el comportamiento por defecto cuando no se maneja la
excepción.
Gestión de excepciones

● Para gestionar una excepción hay que indicar el
bloque de código donde es posible que se
produzca una excepción
– Bloque try

● Hay que indicar que sentencias ejecutar en caso de
que en ese código se produzca una excepción
– Se puede especificar la excepción que queremos
tratar
– Se pueden poner diferentes tratamientos para
distintas excepciones
– Bloques catch
Gestión de excepciones
System.out.println(“Inicio método”);
try {

 float div = 5/0;
 System.out.println(“Div=“+div);

} catch (ArithmeticException e) {
 e.printStackTrace();
}
System.out.println(“Fin metodo”);
Código que
se ejecuta
siempre
Código que
se ejecuta
si no hay
error
Código que
se ejecuta
si hay error
Clase de
excepción
que se
maneja
Gestión de excepciones
public class Divisor {
 public static void main(String[] args) {
 try {
 int numero1 = Integer.parseInt(args[0]);
 int numero2 = Integer.parseInt(args[1]);
 float div = numero1 / numero2;

 System.out.println(“Div=“+div);

 } catch (ArithmeticException e) {
 System.out.println(“Error aritmético”);
 System.out.println(e.getMessage());
 } catch (NumberFormatException e){
 System.out.println(“Error de formato”);
 System.out.println(e.getMessage());
 }
 }
}


Dependiendo
del error, se
ejecuta un
código u otro


Gestión de excepciones
public class Divisor2 {
 public static void main(String[] args) {
 try {
 int numero1 = Integer.parseInt(args[0]);
 int numero2 = Integer.parseInt(args[1]);
 int div = dividir(numero1, numero2);
 System.out.println("Div=" + div);
 } catch (ArithmeticException e) {
 System.out.println(e.getMessage());
 } catch (NumberFormatException e) {
 System.out.println(e.getMessage());
 }
 }
 public static int dividir(int num, int den) {
 return num / den;
 }
}


Las excepciones se
propagan a través de
las llamadas a métodos
La excepción se
produce dentro de un
método y se captura
fuera del método
Puede haber varios
métodos entre la
excepción y su captura

Gestión de excepciones

● Se pueden poner clases padre en los bloques
catch
– Se pueden agrupar varias excepciones en un único
catch si tienen una clase padre en común
– El orden de colocación de los catch es importante,
primero deben ponerse los catch de las clases
hijas, si no, no se ejecutarán nunca
Gestión de excepciones
public class Divisor {
 public static void main(String[] args) {
 try {
 int numero1 = Integer.parseInt(args[0]);
 int numero2 = Integer.parseInt(args[1]);
 float div = numero1 / numero2;

 System.out.println(“Div=“+div);

 } catch (Exception e) {
 System.out.println(“Error en aplicación”);
 System.out.println(e.getMessage());
 }
 }
}
Independientemente de la
excepción producida, se
ejecuta este manejador
porque ArithmeticException
y NumberFormatException
heredan de Exception







Lanzamiento y declaración de
excepciones

● El desarrollador puede generar o lanzar su
propias excepciones cuando se producen
condiciones inesperadas

● Se crea un objeto de una clase que herede de
Exception y se lanza o eleva

● Se lanza con la sentencia throw

● Cuando se lanza una excepción se interrumpe
el flujo de ejecución secuencial.
Lanzamiento y declaración de
excepciones

try {
 int [] s1 = ...
 int [] s2 = ...
 int [] ss = SumaTablas(s1,s2);
} catch (IllegalArgumentException e){
 System.out.println(e.getMessage());
}
 public static int [] sumaTablas(int [] s1, int [] s2){
 if(s1.length != s2.length){
 throw new IllegalArgumentException(
 “Deben tener el mismo tamaño”);
 }
 int [] resu = new int[s1.length];
 for (int i=0;i<resu.length;i++){
resu[i] = s1[i]+s2[i];
 }
 return resu;
 }

La
excepción
se crea y
se lanza
La
excepción
se
captura.
Es el
objeto
anterior
Lanzamiento y declaración de
excepciones

● ¿Cómo sabemos las excepciones que se
pueden producir en un método?
– Manual de java: JavaDoc de los métodos
•NumberFormatException en el método
Integer.parseInt(String s)
– Especificación del lenguaje Java
•NullPointerException
•ClassCastException
•ArithmeticException

● Existen dos tipos de excepciones
– Excepciones que se pueden capturar o se pueden
ignorar. Pero si ocurren y no se capturan provocan
la terminación de programa, comportamiento por
omisión.
– Excepciones que no se pueden ignorar (hay que
capturarlas o declararlas). El compilador obliga que
estén dentro de un try - catch
Lanzamiento y declaración de
excepciones
Lanzamiento y declaración de
excepciones

● Excepciones que se pueden capturar
o se pueden ignorar
– Son todas las clases hijas de
RuntimeException
– Ejemplos
• NullPointerException
• ClassCastException
• ArrayIndexOutOfBoundsException
• ArithmeticException
Generalmente se producen por un
fallo del diseño o los algoritmos
del programa.
T h r o w a b l e
E x c e p t i o n
R u n t i m e E x c e p t i o n
Lanzamiento y declaración de
excepciones

● Excepciones que no se pueden ignorar (hay
que capturarlas o declararlas)
– Cualquier excepción que no sea hija de
RuntimeException
– Ejemplos
•IOException
•SQLException
•MalformedURLException
•TimeoutException
•ParseException
Lanzamiento y declaración de
excepciones


● Resumen
– Se puede capturar una excepción proporcionando un
manejador para ella (try / catch)
– Si una excepción no se puede ignorar (no es
RuntimeException) y el método no captura la excepción,
se debe declarar que en ese método se puede lanzar dicha
excepción (throws)
– En un método una excepción se puede lanzar
• De forma directa creando la excepción (throw)
• De forma indirecta a través de excepciones producidas en los
métodos a los que se llama







Creación de excepciones propias

● Siempre que se necesite lanzar una excepción, hay que
buscar las existentes en la librería de Java

● Si no existe una clase que represente la excepción que
se quiere lanzar, se debe crear una clase para la
excepción

● El desarrollador debe elegir si la excepción debe heredar
de RuntimeException (puede ser ignorada)

● Al constructor de Exception y RuntimeException se
le puede pasar un mensaje con String que informe de
la excepción


● Ejemplo de excepción propia
– Únicamente crea el mensaje de la excepción
public class ListFullException extends Exception {
 public ListFullException(int maximoTamanno){
 super("Se ha superado el tamaño máximo de "
 +maximoTamanno);
 }
}






Bloque finally

● Las excepciones hacen que los métodos
finalicen su ejecución en el punto donde se
produjo la excepción

● ¿Qué ocurre si un método abre un fichero y se
produce una excepción antes de haberlo
cerrado? Podemos capturarla y cerrar el
fichero

● ¿Y si no queremos capturarla? ¿Si queremos
elevarla al método que llama?
Bloque finally

● El bloque finally es un bloque opcional al final de
la sentencia try/catch

● Si existe el bloque finally, pueden quitarse todos
los catch y no se captura la excepción

try {
 <sentencias>
} catch (Exception e) {
 <sentencias>
} finally {
 <sentencias>
}
try {
 <sentencias>
} finally {
 <sentencias>
}



● El código del bloque finally se ejecuta
SIEMPRE, se produzca o no alguna
excepción

● Si se produce alguna excepción, el código del
bloque finally se ejecuta se capture o no la
excepción

● Es un bloque donde se cierran los ficheros, se
cierran la conexión con la base de datos,
sockets…




